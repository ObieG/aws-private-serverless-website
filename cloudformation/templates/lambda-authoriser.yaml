AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Lambda function, invoked by Cognito users, which sends the Google login payload
  from the client browser back to Google in order to verify the email address is
  from a whitelist. If successful CloudFront cookies are issued.
  Template from https://bitbucket.org/cloudreach/ce-labs-infra
Parameters:
  CloudFrontCookieDomain:
    Description: Domain to set Cloudfront cookies. This matches the site address
    Type: String
  CloudFrontCookieValidityDays:
    Description: Number of days to issue cookies to successfully authenticated visitors
    Type: String
  CloudFrontKeyS3Bucket:
    Description: Name of the bucket containing the CloudFront key
    Type: String
  CloudFrontKeyS3Key:
    Description: Path to the key in the CloudFront key bucket
    Type: String
  CloudFrontKeyId:
    Description: CloudFront Keypair ID
    Type: String
  LambdaCodeS3Bucket:
    Description: S3 Bucket containing the lambda function
    Type: String
  LambdaCodeS3Key:
    Description: Key within the S3 bucket for the lambda function code
    Type: String
  AuthorisedDomains:
    Description: Comma separated list of authorised domains e.g. "@example.org,@foo.bar"
    Type: String
Resources:
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        -
          PolicyName: "staticsite-authoriser"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: AllowLogs
                Effect: Allow
                Resource: "*"
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              -
                Sid: AllowCloudFrontKeyAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:aws:s3:::"
                      - !Ref CloudFrontKeyS3Bucket
                      - "/"
                      - !Ref CloudFrontKeyS3Key
  LambdaAuthoriser:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: >
        Passes a suplied Google OAuth2 token to Google and inspects the email domain.
        Sets CloudFront cookies if domain matches and returns a denied message if not.
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key
      Environment:
        Variables:
          CloudFrontCookieDomain: !Ref CloudFrontCookieDomain
          CloudFrontCookieValidityDays: !Ref CloudFrontCookieValidityDays
          CloudFrontKeyS3Bucket: !Ref CloudFrontKeyS3Bucket
          CloudFrontKeyS3Key: !Ref CloudFrontKeyS3Key
          CloudFrontKeyId: !Ref CloudFrontKeyId
          AuthorisedDomains: !Ref AuthorisedDomains
      Runtime: nodejs4.3
      Handler: lambda.handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 5
Outputs:
  LambdaFunctionName:
    Description: Generated name of the lambda function
    Value: !Ref LambdaAuthoriser
  LambdaFunctionArn:
    Description: ARN for the lambda function
    Value: !GetAtt LambdaAuthoriser.Arn
